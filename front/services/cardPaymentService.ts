// Servi√ßo de pagamento com cart√£o - Checkout Transparente conforme documenta√ß√£o oficial
import api from './api';
import CardManagementService from './cardManagementService';

export interface CardPaymentPayload {
  amount: number;
  description: string;
  payerEmail: string;
  token: string;
  installments: number;
  paymentMethodId: string;
  issuerId?: number;
  cardNumber?: string; // Para detec√ß√£o de bandeira
  usarCartaoSalvo?: boolean; // Flag para indicar se √© cart√£o salvo
  cartaoId?: number; // ID do cart√£o salvo no banco local
  securityCode?: string; // CVV para cart√µes salvos
  pedidoId?: number; // ID do pedido para associar pagamento
}

export interface CardPaymentResponse {
  paymentId: string;
  status: string;
  status_detail: string;
}

export interface CardTokenPayload {
  cardNumber: string;
  cardExp: string;
  cardCvv: string;
  cardName: string;
}

export interface SavedCardTokenPayload {
  cardId: string;
  securityCode: string;
}

// Gerar token para cart√£o novo com valida√ß√£o melhorada
export async function generateCardToken(payload: CardTokenPayload): Promise<string> {
  try {
    console.log('üîÑ Gerando token para cart√£o novo:', payload.cardNumber.substring(0, 4) + '****');
    
    // Validar dados do cart√£o antes de enviar
    const validation = CardManagementService.validateCardData(payload);
    if (!validation.isValid) {
      throw new Error(validation.errors.join(', '));
    }
    
    const { data } = await api.post<{ token: string }>('/pagamento/gerar-token-cartao', payload);
    
    if (!data.token) {
      throw new Error('Token n√£o foi gerado');
    }
    
    console.log('‚úÖ Token gerado com sucesso');
    return data.token;
  } catch (error: any) {
    console.error('‚ùå Erro ao gerar token:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao gerar token do cart√£o');
  }
}

// Gerar token para cart√£o salvo
export async function generateSavedCardToken(payload: SavedCardTokenPayload): Promise<string> {
  try {
    console.log('üîÑ Gerando token para cart√£o salvo:', payload.cardId.substring(0, 6) + '****');
    
    if (!payload.cardId || !payload.securityCode) {
      throw new Error('cardId e securityCode s√£o obrigat√≥rios');
    }
    
    const { data } = await api.post<{ token: string }>('/pagamento/gerar-token-cartao-salvo', payload);
    
    if (!data.token) {
      throw new Error('Token n√£o foi gerado');
    }
    
    console.log('‚úÖ Token gerado com sucesso para cart√£o salvo');
    return data.token;
  } catch (error: any) {
    console.error('‚ùå Erro ao gerar token do cart√£o salvo:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao gerar token do cart√£o salvo');
  }
}

// Criar pagamento com cart√£o com valida√ß√£o melhorada
export async function createCardPayment(payload: CardPaymentPayload): Promise<CardPaymentResponse> {
  try {
    console.log('üîÑ Criando pagamento com cart√£o:', {
      amount: payload.amount,
      description: payload.description,
      payerEmail: payload.payerEmail,
      paymentMethodId: payload.paymentMethodId,
      installments: payload.installments,
      usarCartaoSalvo: payload.usarCartaoSalvo
    });
    
    // Valida√ß√µes b√°sicas
    if (!payload.amount || payload.amount <= 0) {
      throw new Error('Valor do pagamento inv√°lido');
    }
    
    if (!payload.description || !payload.payerEmail || !payload.paymentMethodId) {
      throw new Error('Dados obrigat√≥rios ausentes');
    }
    
    // Para cart√£o salvo, n√£o precisa de token (ser√° gerado no backend)
    // Mas precisa de cartaoId e securityCode
    if (payload.usarCartaoSalvo) {
      if (!payload.cartaoId || !payload.securityCode) {
        throw new Error('Para cart√£o salvo, cartaoId e securityCode s√£o obrigat√≥rios');
      }
    } else {
      // Para cart√£o novo, token √© obrigat√≥rio
      if (!payload.token) {
        throw new Error('Token do cart√£o √© obrigat√≥rio');
      }
    }
    
    if (!payload.installments || payload.installments < 1) {
      throw new Error('N√∫mero de parcelas inv√°lido');
    }
    
    // Detectar bandeira se n√£o foi fornecida e temos o n√∫mero do cart√£o
    let finalPaymentMethodId = payload.paymentMethodId;
    if (payload.cardNumber && !payload.usarCartaoSalvo) {
      finalPaymentMethodId = CardManagementService.detectCardBrand(payload.cardNumber);
      console.log('üéØ Bandeira detectada:', finalPaymentMethodId);
    }
    
    const { data } = await api.post<CardPaymentResponse>('/pagamento/cartao', {
      ...payload,
      paymentMethodId: finalPaymentMethodId
    });
    
    if (!data.paymentId) {
      throw new Error('Pagamento n√£o foi criado');
    }
    
    console.log('‚úÖ Pagamento com cart√£o criado:', data.paymentId);
    return data;
  } catch (error: any) {
    console.error('‚ùå Erro ao criar pagamento com cart√£o:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao criar pagamento com cart√£o');
  }
}

// Consultar status do pagamento com cart√£o
export async function getCardPaymentStatus(paymentId: string): Promise<{ status: string; status_detail: string }> {
  try {
    console.log('üîÑ Consultando status do pagamento:', paymentId);
    
    if (!paymentId) {
      throw new Error('ID do pagamento √© obrigat√≥rio');
    }
    
    const { data } = await api.get<{ status: string; status_detail: string }>(`/pagamento/mercadopago/status/${paymentId}`);
    
    console.log('‚úÖ Status consultado:', data.status);
    return data;
  } catch (error: any) {
    console.error('‚ùå Erro ao consultar status:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao consultar status do pagamento');
  }
}

// M√©todo auxiliar para criar pagamento com cart√£o salvo
export async function createPaymentWithSavedCard(paymentData: {
  amount: number;
  description: string;
  payerEmail: string;
  customerId: string;
  cardId: string;
  securityCode: string;
  installments?: number;
  paymentMethodId?: string;
}): Promise<CardPaymentResponse> {
  try {
    console.log('üîÑ Criando pagamento com cart√£o salvo:', {
      customerId: paymentData.customerId,
      cardId: paymentData.cardId.substring(0, 6) + '****',
      amount: paymentData.amount
    });
    
    const payload: CardPaymentPayload = {
      amount: paymentData.amount,
      description: paymentData.description,
      payerEmail: paymentData.payerEmail,
      token: '', // Ser√° preenchido pelo backend
      installments: paymentData.installments || 1,
      paymentMethodId: paymentData.paymentMethodId || 'visa',
      usarCartaoSalvo: true,
      cartaoId: parseInt(paymentData.cardId), // cardId √© o ID do cart√£o no banco local (n√£o o mercadoPagoCardId)
      securityCode: paymentData.securityCode
    };
    
    return await createCardPayment(payload);
  } catch (error: any) {
    console.error('‚ùå Erro ao criar pagamento com cart√£o salvo:', error.message);
    throw error;
  }
}
