// Servi√ßo de gest√£o de cart√µes - Integrado com Checkout Transparente
import api from './api';
import CardManagementService from './cardManagementService';

export interface Cartao {
  id: number;
  usuarioId: number;
  mercadoPagoCardId: string;
  lastFourDigits: string;
  firstSixDigits: string;
  expirationMonth: number;
  expirationYear: number;
  paymentMethodId: string;
  isDefault: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface AdicionarCartaoPayload {
  usuarioId: number;
  token: string;
  cardNumber: string;
  cardExp: string;
  cardCvv: string;
  cardName: string;
}

// Listar cart√µes do usu√°rio
export const getCartoes = async (usuarioId: number): Promise<Cartao[]> => {
  try {
    console.log('üîÑ Listando cart√µes do usu√°rio:', usuarioId);
    const response = await api.get(`/cartoes/usuario/${usuarioId}`);
    console.log('‚úÖ Cart√µes obtidos:', response.data.length);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erro ao listar cart√µes:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao listar cart√µes');
  }
};

// Adicionar novo cart√£o com valida√ß√£o melhorada
export const adicionarCartao = async (payload: AdicionarCartaoPayload): Promise<{ success: boolean; cartao: Cartao; message: string }> => {
  try {
    console.log('üîÑ Adicionando cart√£o:', payload.cardNumber.substring(0, 4) + '****');
    
    // Validar dados do cart√£o antes de enviar
    const validation = CardManagementService.validateCardData({
      cardNumber: payload.cardNumber,
      cardExp: payload.cardExp,
      cardCvv: payload.cardCvv,
      cardName: payload.cardName
    });
    
    if (!validation.isValid) {
      throw new Error(validation.errors.join(', '));
    }
    
    // Detectar bandeira do cart√£o
    const paymentMethodId = CardManagementService.detectCardBrand(payload.cardNumber);
    console.log('üéØ Bandeira detectada:', paymentMethodId);
    
    const response = await api.post('/cartoes/adicionar', {
      ...payload,
      paymentMethodId // Incluir bandeira detectada
    });
    
    console.log('‚úÖ Cart√£o adicionado com sucesso:', response.data.cartao.id);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erro ao adicionar cart√£o:', error.response?.data || error.message);
    
    // Tratar erro espec√≠fico de cart√£o duplicado
    if (error.response?.status === 400 && error.response?.data?.error) {
      throw new Error(error.response.data.error);
    }
    
    // Tratar outros erros
    throw new Error(error.response?.data?.message || error.message || 'Erro ao adicionar cart√£o');
  }
};

// Definir cart√£o como padr√£o
export const definirCartaoPadrao = async (cartaoId: number, usuarioId: number): Promise<{ success: boolean; cartao: Cartao; message: string }> => {
  try {
    console.log('üîÑ Definindo cart√£o padr√£o:', { cartaoId, usuarioId });
    
    const payload = { cartaoId, usuarioId };
    
    const response = await api.put('/cartoes/padrao', payload);
    
    console.log('‚úÖ Cart√£o definido como padr√£o:', response.data.cartao.id);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erro ao definir cart√£o padr√£o:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao definir cart√£o padr√£o');
  }
};

// Remover cart√£o
export const removerCartao = async (cartaoId: number): Promise<{ success: boolean; message: string }> => {
  try {
    console.log('üîÑ Removendo cart√£o:', cartaoId);
    
    const response = await api.delete(`/cartoes/${cartaoId}`);
    
    console.log('‚úÖ Cart√£o removido com sucesso');
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erro ao remover cart√£o:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao remover cart√£o');
  }
};

// Obter cart√£o padr√£o do usu√°rio
export const getCartaoPadrao = async (usuarioId: number): Promise<Cartao | null> => {
  try {
    console.log('üîÑ Obtendo cart√£o padr√£o do usu√°rio:', usuarioId);
    
    const response = await api.get(`/cartoes/padrao/${usuarioId}`);
    
    console.log('‚úÖ Cart√£o padr√£o obtido:', response.data?.id || 'nenhum');
    return response.data;
  } catch (error: any) {
    console.error('‚ùå Erro ao obter cart√£o padr√£o:', error.response?.data || error.message);
    throw new Error(error.response?.data?.error || error.message || 'Erro ao obter cart√£o padr√£o');
  }
};

// Fun√ß√£o auxiliar para formatar cart√£o para exibi√ß√£o
export const formatarCartao = (cartao: Cartao): string => {
  const bandeira = cartao.paymentMethodId.toUpperCase();
  const ultimosDigitos = cartao.lastFourDigits;
  const mes = cartao.expirationMonth.toString().padStart(2, '0');
  const ano = cartao.expirationYear.toString().slice(-2);
  
  return `${bandeira} ****${ultimosDigitos} (${mes}/${ano})`;
};

// Fun√ß√£o auxiliar para obter √≠cone da bandeira
export const getBandeiraIcon = (paymentMethodId: string): string => {
  switch (paymentMethodId.toLowerCase()) {
    case 'visa':
      return 'üí≥';
    case 'master':
      return 'üí≥';
    case 'amex':
      return 'üí≥';
    case 'elo':
      return 'üí≥';
    case 'hipercard':
      return 'üí≥';
    case 'diners':
      return 'üí≥';
    default:
      return 'üí≥';
  }
};

// Fun√ß√£o auxiliar para obter nome da bandeira
export const getBandeiraNome = (paymentMethodId: string): string => {
  switch (paymentMethodId.toLowerCase()) {
    case 'visa':
      return 'Visa';
    case 'master':
      return 'Mastercard';
    case 'amex':
      return 'American Express';
    case 'elo':
      return 'Elo';
    case 'hipercard':
      return 'Hipercard';
    case 'diners':
      return 'Diners Club';
    default:
      return 'Cart√£o';
  }
};

// Fun√ß√£o auxiliar para validar dados do cart√£o
export const validarCartao = CardManagementService.validateCardData;

// Fun√ß√£o auxiliar para detectar bandeira do cart√£o
export const detectarBandeira = CardManagementService.detectCardBrand;
