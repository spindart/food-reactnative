import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// Armazenar c√≥digos temporariamente em mem√≥ria (em produ√ß√£o, usar Redis)
const verificationCodes = new Map<string, { code: string; expiresAt: Date }>();

/**
 * Gera um c√≥digo de verifica√ß√£o aleat√≥rio de 6 d√≠gitos
 */
function generateVerificationCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

/**
 * Envia c√≥digo de verifica√ß√£o via WhatsApp
 * 
 * OP√á√ïES DE INTEGRA√á√ÉO:
 * 1. Evolution API (Gr√°tis, open-source) - https://evolution-api.com
 * 2. Twilio WhatsApp API (Pago, robusto) - https://www.twilio.com/docs/whatsapp
 * 3. WhatsApp Business API oficial (Pago, oficial)
 * 4. Baileys (Gr√°tis, biblioteca Node.js)
 * 
 * Por enquanto, apenas simula o envio e armazena o c√≥digo.
 * Para implementar, substitua a l√≥gica de envio abaixo.
 */
export class WhatsAppService {
  /**
   * Envia c√≥digo de verifica√ß√£o via WhatsApp
   */
  static async sendVerificationCode(phone: string): Promise<{ success: boolean; message: string }> {
    try {
      // Limpar n√∫mero do telefone (apenas n√∫meros)
      const cleanPhone = phone.replace(/\D/g, '');
      
      if (cleanPhone.length < 10 || cleanPhone.length > 11) {
        throw new Error('N√∫mero de telefone inv√°lido');
      }

      // Formatar para WhatsApp (55 + DDD + n√∫mero)
      const whatsappNumber = cleanPhone.startsWith('55') 
        ? cleanPhone 
        : `55${cleanPhone}`;

      // Gerar c√≥digo
      const code = generateVerificationCode();
      
      // Armazenar c√≥digo (expira em 5 minutos)
      const expiresAt = new Date();
      expiresAt.setMinutes(expiresAt.getMinutes() + 5);
      
      verificationCodes.set(whatsappNumber, { code, expiresAt });

      // ============================================
      // IMPLEMENTAR ENVIO REAL DE WHATSAPP AQUI
      // ============================================
      
      // OP√á√ÉO 1: Evolution API (Recomendado - Gr√°tis)
      /*
      import axios from 'axios';
      
      const evolutionApiUrl = process.env.EVOLUTION_API_URL || 'http://localhost:8080';
      const evolutionApiKey = process.env.EVOLUTION_API_KEY;
      
      try {
        await axios.post(
          `${evolutionApiUrl}/message/sendText/${evolutionApiKey}`,
          {
            number: whatsappNumber,
            text: `Seu c√≥digo de verifica√ß√£o √©: ${code}\n\nEste c√≥digo expira em 5 minutos.`
          }
        );
        console.log(`‚úÖ C√≥digo enviado via Evolution API para ${whatsappNumber}`);
      } catch (error) {
        console.error('Erro ao enviar via Evolution API:', error);
        throw new Error('Erro ao enviar c√≥digo via WhatsApp');
      }
      */

      // OP√á√ÉO 2: Twilio WhatsApp API
      /*
      import twilio from 'twilio';
      
      const accountSid = process.env.TWILIO_ACCOUNT_SID;
      const authToken = process.env.TWILIO_AUTH_TOKEN;
      const fromNumber = process.env.TWILIO_WHATSAPP_NUMBER; // formato: whatsapp:+5511999999999
      
      const client = twilio(accountSid, authToken);
      
      try {
        await client.messages.create({
          from: fromNumber,
          to: `whatsapp:+${whatsappNumber}`,
          body: `Seu c√≥digo de verifica√ß√£o √©: ${code}\n\nEste c√≥digo expira em 5 minutos.`
        });
        console.log(`‚úÖ C√≥digo enviado via Twilio para ${whatsappNumber}`);
      } catch (error) {
        console.error('Erro ao enviar via Twilio:', error);
        throw new Error('Erro ao enviar c√≥digo via WhatsApp');
      }
      */

      // Por enquanto, apenas loga (para desenvolvimento)
      console.log(`üì± [SIMULA√á√ÉO] C√≥digo de verifica√ß√£o para ${whatsappNumber}: ${code}`);
      console.log(`‚ö†Ô∏è  Em produ√ß√£o, implemente uma das op√ß√µes acima!`);

      return {
        success: true,
        message: 'C√≥digo enviado com sucesso!',
      };
    } catch (error: any) {
      console.error('Erro ao enviar c√≥digo WhatsApp:', error);
      throw new Error(error.message || 'Erro ao enviar c√≥digo de verifica√ß√£o');
    }
  }

  /**
   * Verifica c√≥digo de verifica√ß√£o
   */
  static async verifyCode(phone: string, code: string): Promise<boolean> {
    try {
      const cleanPhone = phone.replace(/\D/g, '');
      const whatsappNumber = cleanPhone.startsWith('55') 
        ? cleanPhone 
        : `55${cleanPhone}`;

      const stored = verificationCodes.get(whatsappNumber);

      if (!stored) {
        console.log(`‚ùå C√≥digo n√£o encontrado para ${whatsappNumber}`);
        return false;
      }

      // Verificar expira√ß√£o
      if (new Date() > stored.expiresAt) {
        verificationCodes.delete(whatsappNumber);
        console.log(`‚ùå C√≥digo expirado para ${whatsappNumber}`);
        return false;
      }

      // Verificar c√≥digo
      if (stored.code !== code) {
        console.log(`‚ùå C√≥digo inv√°lido para ${whatsappNumber}. Esperado: ${stored.code}, Recebido: ${code}`);
        return false;
      }

      // C√≥digo v√°lido - remover do cache
      verificationCodes.delete(whatsappNumber);
      console.log(`‚úÖ C√≥digo verificado com sucesso para ${whatsappNumber}`);

      // Atualizar telefone como verificado no banco
      await prisma.usuario.updateMany({
        where: { telefone: phone },
        data: { telefoneVerificado: true },
      });

      return true;
    } catch (error: any) {
      console.error('Erro ao verificar c√≥digo:', error);
      return false;
    }
  }

  /**
   * Limpa c√≥digos expirados (chamar periodicamente)
   */
  static cleanExpiredCodes(): void {
    const now = new Date();
    for (const [phone, data] of verificationCodes.entries()) {
      if (now > data.expiresAt) {
        verificationCodes.delete(phone);
      }
    }
  }
}

// Limpar c√≥digos expirados a cada 10 minutos
setInterval(() => {
  WhatsAppService.cleanExpiredCodes();
}, 10 * 60 * 1000);




