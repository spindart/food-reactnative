model Address {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  label      String   // Nome do endereço (ex: Casa, Trabalho)
  address    String   // Endereço completo
  latitude   Float?
  longitude  Float?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
}

model Usuario {
  id               Int               @id @default(autoincrement())
  nome             String
  email            String            @unique
  senha            String
  role             Role
  avaliacoes       Avaliacao[]
  estabelecimentos Estabelecimento[] @relation("UsuarioEstabelecimentos")
  pedidos          Pedido[]          @relation("ClientePedidos")
  addresses        Address[]
  cartoes          Cartao[]
  mercadoPagoCustomerId String?       @unique // ID do customer no MercadoPago
}

model Estabelecimento {
  id              Int         @id @default(autoincrement())
  nome            String
  descricao       String
  endereco        String
  donoId          Int
  avaliacao       Float       @default(0)
  avaliacoesCount Int         @default(0)
  avaliacoes      Avaliacao[]
  dono            Usuario     @relation("UsuarioEstabelecimentos", fields: [donoId], references: [id])
  pedidos         Pedido[]
  produtos        Produto[]
  tempoEntregaMin   Int      @default(30)
  tempoEntregaMax   Int      @default(50)
  taxaEntrega       Float    @default(5.0)
  categorias      Categoria[] @relation("EstabelecimentoCategorias")
  imagem          String?    // URL ou base64 da imagem do estabelecimento
}

model Produto {
  id                Int             @id @default(autoincrement())
  nome              String
  descricao         String
  preco             Float
  estabelecimentoId Int
  itensPedido       ItemPedido[]
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  categorias        Categoria[]     @relation("ProdutoCategorias")
  imagem            String?         // URL ou base64 da imagem do produto (opcional)
}

model Pedido {
  id                Int             @id @default(autoincrement())
  clienteId         Int
  estabelecimentoId Int
  status            Status
  createdAt         DateTime        @default(now())
  itens             ItemPedido[]
  cliente           Usuario         @relation("ClientePedidos", fields: [clienteId], references: [id])
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  
  // Campos de pagamento
  paymentId         String?         @unique // ID do pagamento no MercadoPago
  paymentStatus     String?         // Status do pagamento (approved, pending, etc)
  paymentMethod     String?         // Método de pagamento (credit_card, pix, etc)
  totalAmount       Float?          // Valor total do pedido
  refundId          String?         @unique // ID do reembolso no MercadoPago
  refundStatus      String?         // Status do reembolso (approved, pending, etc)
  refundAmount      Float?          // Valor reembolsado
  refundDate        DateTime?       // Data do reembolso
  
  // Campos para pagamento na entrega
  formaPagamentoEntrega String?     // dinheiro, debito, credito
  precisaTroco         Boolean?     // true/false
  trocoParaQuanto      Float?       // valor do troco solicitado
  
  // Campo para endereço de entrega
  enderecoEntrega      String?      // endereço completo de entrega
}

model ItemPedido {
  id            Int     @id @default(autoincrement())
  pedidoId      Int
  produtoId     Int
  quantidade    Int
  precoUnitario Float
  pedido        Pedido  @relation(fields: [pedidoId], references: [id])
  produto       Produto @relation(fields: [produtoId], references: [id])
}

model Avaliacao {
  id                Int             @id @default(autoincrement())
  estabelecimentoId Int
  usuarioId         Int
  nota              Int
  comentario        String?
  createdAt         DateTime        @default(now())
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  usuario           Usuario         @relation(fields: [usuarioId], references: [id])
}

model Categoria {
  id                Int             @id @default(autoincrement())
  nome              String          @unique
  estabelecimentos   Estabelecimento[] @relation("EstabelecimentoCategorias")
  produtos          Produto[]       @relation("ProdutoCategorias")
}

model Cartao {
  id                    Int      @id @default(autoincrement())
  usuarioId             Int
  usuario               Usuario  @relation(fields: [usuarioId], references: [id])
  mercadoPagoCardId      String   @unique // ID do cartão no MercadoPago
  lastFourDigits        String   // Últimos 4 dígitos
  firstSixDigits        String   // Primeiros 6 dígitos
  expirationMonth       Int      // Mês de expiração
  expirationYear        Int      // Ano de expiração
  paymentMethodId       String   // Bandeira (visa, master, etc)
  isDefault             Boolean  @default(false) // Cartão padrão
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Role {
  cliente
  dono
  admin
}

enum Status {
  pendente
  preparo
  entregue
  cancelado
}
