model Address {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
  label      String   // Nome do endereço (ex: Casa, Trabalho)
  address    String   // Endereço completo
  latitude   Float?
  longitude  Float?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  name  String
}

model Usuario {
  id               Int               @id @default(autoincrement())
  nome             String
  email            String            @unique
  senha            String
  cpf              String?           @unique // CPF do usuário
  telefone         String?           // Telefone/WhatsApp do usuário
  telefoneVerificado Boolean         @default(false) // Indica se o telefone foi verificado
  role             Role
  avaliacoes       Avaliacao[]
  estabelecimentos Estabelecimento[] @relation("UsuarioEstabelecimentos")
  pedidos          Pedido[]          @relation("ClientePedidos")
  addresses        Address[]
  cartoes          Cartao[]
  mensagens        Mensagem[]        @relation("UsuarioMensagens")
  notificacoes    Notificacao[]     @relation("UsuarioNotificacoes")
  mercadoPagoCustomerId String?       @unique // ID do customer no MercadoPago
  expoPushToken   String?            // Token do Expo Push Notifications
  createdAt        DateTime?         @default(now())
  updatedAt        DateTime?         @updatedAt
}

model Estabelecimento {
  id              Int         @id @default(autoincrement())
  nome            String
  descricao       String
  endereco        String
  latitude        Float?      // Latitude do estabelecimento
  longitude       Float?      // Longitude do estabelecimento
  donoId          Int
  avaliacao       Float       @default(0)
  avaliacoesCount Int         @default(0)
  avaliacoes      Avaliacao[]
  dono            Usuario     @relation("UsuarioEstabelecimentos", fields: [donoId], references: [id])
  pedidos         Pedido[]
  produtos        Produto[]
  produtoCategorias ProdutoCategoria[]
  tempoEntregaMin   Int      @default(30)
  tempoEntregaMax   Int      @default(50)
  taxaEntrega       Float    @default(5.0)
  categorias      Categoria[] @relation("EstabelecimentoCategorias")
  imagem          String?    // URL ou base64 da imagem do estabelecimento
  // Funcionamento
  diasAbertos     Int[]
  horaAbertura    String?
  horaFechamento  String?
  // Flag manual de aberto/fechado controlada pelo dono
  aberto          Boolean    @default(false)
  // Configuração de frete grátis
  freteGratisAtivado      Boolean  @default(false)
  valorMinimoFreteGratis  Float?
}

model Produto {
  id                Int             @id @default(autoincrement())
  nome              String
  descricao         String
  preco             Float
  estabelecimentoId Int
  produtoCategoriaId Int?
  itensPedido       ItemPedido[]
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  categorias        Categoria[]     @relation("ProdutoCategorias")
  produtoCategoria  ProdutoCategoria? @relation(fields: [produtoCategoriaId], references: [id])
  imagem            String?         // URL ou base64 da imagem do produto (opcional)
}

model Pedido {
  id                Int             @id @default(autoincrement())
  clienteId         Int
  estabelecimentoId Int
  status            Status
  createdAt         DateTime        @default(now())
  itens             ItemPedido[]
  cliente           Usuario         @relation("ClientePedidos", fields: [clienteId], references: [id])
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  conversa          Conversa?
  
  // Campos de pagamento
  paymentId         String?         @unique // ID do pagamento no MercadoPago
  paymentStatus     String?         // Status do pagamento (approved, pending, etc)
  paymentMethod     String?         // Método de pagamento (credit_card, pix, etc)
  formaPagamento    String?         // Forma de pagamento geral (dinheiro, cartao, pix)
  totalAmount       Float?          // Valor total do pedido
  refundId          String?         @unique // ID do reembolso no MercadoPago
  refundStatus      String?         // Status do reembolso (approved, pending, etc)
  refundAmount      Float?          // Valor reembolsado
  refundDate        DateTime?       // Data do reembolso
  
  // Campos para pagamento na entrega
  formaPagamentoEntrega String?     // dinheiro, debito, credito
  precisaTroco         Boolean?     // true/false
  trocoParaQuanto      Float?       // valor do troco solicitado
  
  // Campo para endereço de entrega
  enderecoEntrega      String?      // endereço completo de entrega
  
  // Campo para taxa de entrega
  taxaEntrega         Float?       // taxa de entrega aplicada no pedido
  notificacoes        Notificacao[]
}

model ItemPedido {
  id            Int     @id @default(autoincrement())
  pedidoId      Int
  produtoId     Int
  quantidade    Int
  precoUnitario Float
  observacao    String?
  pedido        Pedido  @relation(fields: [pedidoId], references: [id])
  produto       Produto @relation(fields: [produtoId], references: [id])
}

model Avaliacao {
  id                Int             @id @default(autoincrement())
  estabelecimentoId Int
  usuarioId         Int
  nota              Int
  comentario        String?
  createdAt         DateTime        @default(now())
  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  usuario           Usuario         @relation(fields: [usuarioId], references: [id])
}

model Categoria {
  id                Int             @id @default(autoincrement())
  nome              String          @unique
  estabelecimentos   Estabelecimento[] @relation("EstabelecimentoCategorias")
  produtos          Produto[]       @relation("ProdutoCategorias")
}

model ProdutoCategoria {
  id                Int             @id @default(autoincrement())
  estabelecimentoId Int
  nome              String
  slug              String?
  ordem             Int?            @default(0)
  ativa             Boolean         @default(true)
  createdAt         DateTime        @default(now())

  estabelecimento   Estabelecimento @relation(fields: [estabelecimentoId], references: [id])
  produtos          Produto[]

  @@unique([estabelecimentoId, nome])
}

model Cartao {
  id                    Int      @id @default(autoincrement())
  usuarioId             Int
  usuario               Usuario  @relation(fields: [usuarioId], references: [id])
  mercadoPagoCardId      String   @unique // ID do cartão no MercadoPago
  lastFourDigits        String   // Últimos 4 dígitos
  firstSixDigits        String   // Primeiros 6 dígitos
  expirationMonth       Int      // Mês de expiração
  expirationYear        Int      // Ano de expiração
  paymentMethodId       String   // Bandeira (visa, master, etc)
  isDefault             Boolean  @default(false) // Cartão padrão
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

enum Role {
  cliente
  dono
  admin
}

enum Status {
  pendente
  preparo
  em_entrega
  entregue
  cancelado
}

model Conversa {
  id                Int        @id @default(autoincrement())
  pedidoId          Int        @unique
  pedido            Pedido     @relation(fields: [pedidoId], references: [id])
  mensagens         Mensagem[]
  ultimaMensagemAt  DateTime?  // Timestamp da última mensagem
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Mensagem {
  id                Int          @id @default(autoincrement())
  conversaId        Int
  conversa          Conversa     @relation(fields: [conversaId], references: [id])
  remetenteId      Int          // ID do usuário que enviou (cliente ou dono do estabelecimento)
  remetente        Usuario      @relation("UsuarioMensagens", fields: [remetenteId], references: [id])
  texto            String?      // Texto da mensagem (null se for apenas foto)
  imagemUrl        String?      // URL ou base64 da imagem
  status           MensagemStatus @default(enviado)
  isFromEstabelecimento Boolean @default(false) // true se remetente for dono do estabelecimento
  createdAt        DateTime     @default(now())
  lidaEm           DateTime?    // Timestamp quando foi lida
}

enum MensagemStatus {
  enviado
  recebido
  lido
}

model Notificacao {
  id          Int       @id @default(autoincrement())
  usuarioId  Int
  usuario    Usuario   @relation("UsuarioNotificacoes", fields: [usuarioId], references: [id])
  tipo       TipoNotificacao
  titulo     String
  mensagem   String
  data       DateTime? // Dados adicionais em JSON (ex: pedidoId, link, etc)
  lida       Boolean   @default(false)
  lidaEm     DateTime?
  createdAt  DateTime  @default(now())
  
  // Campos opcionais para relacionamentos
  pedidoId   Int?
  pedido     Pedido?   @relation(fields: [pedidoId], references: [id])
}

enum TipoNotificacao {
  STATUS_PEDIDO
  MENSAGEM_RESTAURANTE
  PROMOCAO_CUPOM
  AVISO_IMPORTANTE
  EVENTO_SISTEMA
}
